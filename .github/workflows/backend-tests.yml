name: Backend Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'be/**'

jobs:
  test:
    name: Run Backend Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: legend_score
          MYSQL_USER: docker
          MYSQL_PASSWORD: docker
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install dependencies
        run: |
          cd be
          go mod download

      - name: Wait for MySQL & Set native_password
        run: |
          until mysqladmin ping -h"localhost" --silent; do sleep 1; done
          mysql -h localhost -u docker -pdocker -e \
            "ALTER USER 'docker'@'%' IDENTIFIED WITH mysql_native_password BY 'docker'; FLUSH PRIVILEGES;"

      - name: Run database migrations
        env:
          GO_ENV: test_action
          ROOT_PATH: /home/runner/work/legend_score/legend_score/be
          GOOSE_DRIVER: mysql
          GOOSE_DBSTRING: docker:docker@tcp(localhost:3306)/legend_score
          GOOSE_MIGRATION_DIR: ./infra/database/migrations
          DATABASE_NAME: legend_score
          DATABASE_USER: docker
          DATABASE_PASS: docker
          DATABASE_ADDR: localhost:3306
        run: |
          cd be
          go install github.com/pressly/goose/v3/cmd/goose@latest
          goose -dir ./infra/database/migrations up

      - name: Run tests with coverage
        env:
          GO_ENV: test_action
          ROOT_PATH: /home/runner/work/legend_score/legend_score/be
          GOOSE_DRIVER: mysql
          GOOSE_DBSTRING: docker:docker@tcp(localhost:3306)/legend_score
          GOOSE_MIGRATION_DIR: ./infra/database/migrations
          DATABASE_NAME: legend_score
          DATABASE_USER: docker
          DATABASE_PASS: docker
          DATABASE_ADDR: localhost:3306
          CHANNEL_TOKEN: trh1/DNfclUER97PlFlUcRwLMr4X73UYZZhiAFYPRcOzkiWvZQFNGhgIO8C0AACpTYpg5I/JRHPWsX4FM8ouDbtTbRdZ1L7ONg2wXsjQ7i5W+RmGFy+cAG8IJzADex0nMolQ+GtUsjEQQ/8ebfX2AwdB04t89/1O/w1cDnyilFU=
          CHANNEL_SECRET: 0d58d9edddacd171d7eaa56f1274c977
        run: |
          cd be
          go test -v -coverprofile=cover_file.out ./...
          go tool cover -func=cover_file.out > coverage.txt

      - name: Get coverage percentage
        id: get-coverage
        run: |
          cd be
          COVERAGE=$(grep "total:" coverage.txt | awk '{print $3}')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = '${{ steps.get-coverage.outputs.coverage }}';
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;

            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: `## Backend Test Coverage: ${coverage}

              The backend tests have been run successfully.
              Total coverage: **${coverage}**

              [View detailed coverage report in the workflow run](https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }})
              `
            });