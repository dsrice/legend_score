// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testThrows(t *testing.T) {
	t.Parallel()

	query := Throws()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testThrowsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThrowsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Throws().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThrowsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThrowSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThrowsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ThrowExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Throw exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ThrowExists to return true, but got false.")
	}
}

func testThrowsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	throwFound, err := FindThrow(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if throwFound == nil {
		t.Error("want a record, got nil")
	}
}

func testThrowsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Throws().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testThrowsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Throws().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testThrowsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	throwOne := &Throw{}
	throwTwo := &Throw{}
	if err = randomize.Struct(seed, throwOne, throwDBTypes, false, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}
	if err = randomize.Struct(seed, throwTwo, throwDBTypes, false, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = throwOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = throwTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Throws().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testThrowsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	throwOne := &Throw{}
	throwTwo := &Throw{}
	if err = randomize.Struct(seed, throwOne, throwDBTypes, false, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}
	if err = randomize.Struct(seed, throwTwo, throwDBTypes, false, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = throwOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = throwTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func throwBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Throw) error {
	*o = Throw{}
	return nil
}

func throwAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Throw) error {
	*o = Throw{}
	return nil
}

func throwAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Throw) error {
	*o = Throw{}
	return nil
}

func throwBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Throw) error {
	*o = Throw{}
	return nil
}

func throwAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Throw) error {
	*o = Throw{}
	return nil
}

func throwBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Throw) error {
	*o = Throw{}
	return nil
}

func throwAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Throw) error {
	*o = Throw{}
	return nil
}

func throwBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Throw) error {
	*o = Throw{}
	return nil
}

func throwAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Throw) error {
	*o = Throw{}
	return nil
}

func testThrowsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Throw{}
	o := &Throw{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, throwDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Throw object: %s", err)
	}

	AddThrowHook(boil.BeforeInsertHook, throwBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	throwBeforeInsertHooks = []ThrowHook{}

	AddThrowHook(boil.AfterInsertHook, throwAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	throwAfterInsertHooks = []ThrowHook{}

	AddThrowHook(boil.AfterSelectHook, throwAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	throwAfterSelectHooks = []ThrowHook{}

	AddThrowHook(boil.BeforeUpdateHook, throwBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	throwBeforeUpdateHooks = []ThrowHook{}

	AddThrowHook(boil.AfterUpdateHook, throwAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	throwAfterUpdateHooks = []ThrowHook{}

	AddThrowHook(boil.BeforeDeleteHook, throwBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	throwBeforeDeleteHooks = []ThrowHook{}

	AddThrowHook(boil.AfterDeleteHook, throwAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	throwAfterDeleteHooks = []ThrowHook{}

	AddThrowHook(boil.BeforeUpsertHook, throwBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	throwBeforeUpsertHooks = []ThrowHook{}

	AddThrowHook(boil.AfterUpsertHook, throwAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	throwAfterUpsertHooks = []ThrowHook{}
}

func testThrowsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThrowsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(throwColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThrowToOneGameUsingGame(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Throw
	var foreign Game

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, throwDBTypes, false, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gameDBTypes, false, gameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Game struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GameID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Game().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddGameHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Game) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ThrowSlice{&local}
	if err = local.L.LoadGame(ctx, tx, false, (*[]*Throw)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Game = nil
	if err = local.L.LoadGame(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Game == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testThrowToOneFrameUsingFrame(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Throw
	var foreign Frame

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, throwDBTypes, false, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, frameDBTypes, false, frameColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Frame struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FrameID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Frame().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddFrameHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Frame) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ThrowSlice{&local}
	if err = local.L.LoadFrame(ctx, tx, false, (*[]*Throw)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Frame == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Frame = nil
	if err = local.L.LoadFrame(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Frame == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testThrowToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Throw
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, throwDBTypes, false, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ThrowSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Throw)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testThrowToOneSetOpGameUsingGame(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Throw
	var b, c Game

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, throwDBTypes, false, strmangle.SetComplement(throwPrimaryKeyColumns, throwColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gameDBTypes, false, strmangle.SetComplement(gamePrimaryKeyColumns, gameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Game{&b, &c} {
		err = a.SetGame(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Game != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Throws[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GameID))
		reflect.Indirect(reflect.ValueOf(&a.GameID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GameID != x.ID {
			t.Error("foreign key was wrong value", a.GameID, x.ID)
		}
	}
}
func testThrowToOneSetOpFrameUsingFrame(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Throw
	var b, c Frame

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, throwDBTypes, false, strmangle.SetComplement(throwPrimaryKeyColumns, throwColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, frameDBTypes, false, strmangle.SetComplement(framePrimaryKeyColumns, frameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, frameDBTypes, false, strmangle.SetComplement(framePrimaryKeyColumns, frameColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Frame{&b, &c} {
		err = a.SetFrame(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Frame != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Throws[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FrameID != x.ID {
			t.Error("foreign key was wrong value", a.FrameID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FrameID))
		reflect.Indirect(reflect.ValueOf(&a.FrameID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FrameID != x.ID {
			t.Error("foreign key was wrong value", a.FrameID, x.ID)
		}
	}
}
func testThrowToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Throw
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, throwDBTypes, false, strmangle.SetComplement(throwPrimaryKeyColumns, throwColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Throws[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testThrowsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThrowsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThrowSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThrowsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Throws().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	throwDBTypes = map[string]string{`ID`: `int`, `UserID`: `int`, `GameID`: `int`, `FrameID`: `int`, `ThrowCount`: `int`, `ThrowScore`: `int`, `StrikeFlag`: `tinyint`, `SpareFlag`: `tinyint`, `SplitFlag`: `tinyint`, `Pin1`: `int`, `Pin2`: `int`, `Pin3`: `int`, `Pin4`: `int`, `Pin5`: `int`, `Pin6`: `int`, `Pin7`: `int`, `Pin8`: `int`, `Pin9`: `int`, `Pin10`: `int`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `DeletedFLG`: `tinyint`, `DeletedAt`: `datetime`}
	_            = bytes.MinRead
)

func testThrowsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(throwPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(throwAllColumns) == len(throwPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, throwDBTypes, true, throwPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testThrowsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(throwAllColumns) == len(throwPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Throw{}
	if err = randomize.Struct(seed, o, throwDBTypes, true, throwColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, throwDBTypes, true, throwPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(throwAllColumns, throwPrimaryKeyColumns) {
		fields = throwAllColumns
	} else {
		fields = strmangle.SetComplement(
			throwAllColumns,
			throwPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ThrowSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testThrowsUpsert(t *testing.T) {
	t.Parallel()

	if len(throwAllColumns) == len(throwPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLThrowUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Throw{}
	if err = randomize.Struct(seed, &o, throwDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Throw: %s", err)
	}

	count, err := Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, throwDBTypes, false, throwPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Throw struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Throw: %s", err)
	}

	count, err = Throws().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
